# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AnimationHint(_model_base.Model):
    """Defines hints for animation frame settings, to be used as default overrides,
    for a
    particular collection. If not set, a global default will be used on the
    frontend.

    Attributes
    ----------

    unit:
    One of mins, hours, days, weeks, months, years
    step:
    The number of units to increment per frame
    duration:
    The number of seconds to display each frame
    frame_count:
    The total number of frames to generate.

    :ivar unit: Unit.
    :vartype unit: str
    :ivar step: Step.
    :vartype step: int
    :ivar duration: Duration.
    :vartype duration: int
    :ivar frame_count: Framecount.
    :vartype frame_count: int
    """

    unit: Optional[str] = rest_field()
    """Unit."""
    step: Optional[int] = rest_field()
    """Step."""
    duration: Optional[int] = rest_field()
    """Duration."""
    frame_count: Optional[int] = rest_field(name="frameCount")
    """Framecount."""

    @overload
    def __init__(
        self,
        *,
        unit: Optional[str] = None,
        step: Optional[int] = None,
        duration: Optional[int] = None,
        frame_count: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BadRequest(_model_base.Model):
    """Validation error.


    :ivar text: Required.
    :vartype text: str
    """

    text: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Bounds(_model_base.Model):
    """Dataset Bounding box.


    :ivar bounds: Bounds. Required.
    :vartype bounds: list[any]
    """

    bounds: List[Any] = rest_field()
    """Bounds. Required."""

    @overload
    def __init__(
        self,
        *,
        bounds: List[Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DefaultLocation(_model_base.Model):
    """Defines a default location for showcasing a collection.

    Attributes
    ----------

    zoom:
    Zoom level at which to center the map.
    coordinates:
    Coordinates at which to center the map, [latitude, longitude].


    :ivar zoom: Zoom. Required.
    :vartype zoom: int
    :ivar coordinates: Coordinates. Required.
    :vartype coordinates: list[float]
    """

    zoom: int = rest_field()
    """Zoom. Required."""
    coordinates: List[float] = rest_field()
    """Coordinates. Required."""

    @overload
    def __init__(
        self,
        *,
        zoom: int,
        coordinates: List[float],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Feature(_model_base.Model):
    """Feature Model.

    :ivar type: Type.
    :vartype type: str
    :ivar geometry: Geometry.
    :vartype geometry: ~geocatalog.models.FeatureGeometry
    :ivar properties: Properties.
    :vartype properties: dict[str, any]
    :ivar id: Id.
    :vartype id: str
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    type: Optional[str] = rest_field()
    """Type."""
    geometry: Optional["_models.FeatureGeometry"] = rest_field()
    """Geometry."""
    properties: Optional[Dict[str, Any]] = rest_field()
    """Properties."""
    id: Optional[str] = rest_field()
    """Id."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        geometry: Optional["_models.FeatureGeometry"] = None,
        properties: Optional[Dict[str, Any]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FeatureGeometry(_model_base.Model):
    """Geometry."""


class FeaturePolygonDictStrRioTilerModelsInfo(_model_base.Model):
    """Feature Model.

    :ivar type: Type.
    :vartype type: str
    :ivar geometry: Polygon Model.
    :vartype geometry: ~geocatalog.models.Polygon
    :ivar properties: Properties.
    :vartype properties: dict[str, ~geocatalog.models.RioTilerModelsInfo]
    :ivar id: Id.
    :vartype id: str
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    type: Optional[str] = rest_field()
    """Type."""
    geometry: Optional["_models.Polygon"] = rest_field()
    """Polygon Model."""
    properties: Optional[Dict[str, "_models.RioTilerModelsInfo"]] = rest_field()
    """Properties."""
    id: Optional[str] = rest_field()
    """Id."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        geometry: Optional["_models.Polygon"] = None,
        properties: Optional[Dict[str, "_models.RioTilerModelsInfo"]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Geojson(_model_base.Model):
    """GeoJSON Feature or FeatureCollection."""


class Geojson0(Feature):
    """GeoJSON Feature.

    :ivar type: Type.
    :vartype type: str
    :ivar geometry: Geometry.
    :vartype geometry: ~geocatalog.models.FeatureGeometry
    :ivar properties: Properties.
    :vartype properties: dict[str, any]
    :ivar id: Id.
    :vartype id: str
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        geometry: Optional["_models.FeatureGeometry"] = None,
        properties: Optional[Dict[str, Any]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Geojson1(Feature):
    """GeoJSON Feature.

    :ivar type: Type.
    :vartype type: str
    :ivar geometry: Geometry.
    :vartype geometry: ~geocatalog.models.FeatureGeometry
    :ivar properties: Properties.
    :vartype properties: dict[str, any]
    :ivar id: Id.
    :vartype id: str
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        geometry: Optional["_models.FeatureGeometry"] = None,
        properties: Optional[Dict[str, Any]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Geojson2(Feature):
    """GeoJSON Feature.

    :ivar type: Type.
    :vartype type: str
    :ivar geometry: Geometry.
    :vartype geometry: ~geocatalog.models.FeatureGeometry
    :ivar properties: Properties.
    :vartype properties: dict[str, any]
    :ivar id: Id.
    :vartype id: str
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        geometry: Optional["_models.FeatureGeometry"] = None,
        properties: Optional[Dict[str, Any]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionDefinitionCreation(_model_base.Model):
    """Spatio geo-catalog ingestion creation model.

    All required parameters must be populated in order to send to server.

    :ivar import_type: Ingestion type. Required. Known values are: "StaticCatalog" and
     "ImportFile".
    :vartype import_type: str or ~geocatalog.models.IngestionType
    :ivar source_catalog_url: Source catalog URL. *Required for StaticCatalog ingestion type.
    :vartype source_catalog_url: str
    :ivar source_data_type: Source catalog data type. *Required for ImportFile ingestion type.
    :vartype source_data_type: str
    :ivar skip_existing_items: Skip processing existing items in the catalog. Required.
    :vartype skip_existing_items: bool
    :ivar keep_original_assets: Keep original source assets. Required.
    :vartype keep_original_assets: bool
    """

    import_type: Union[str, "_models.IngestionType"] = rest_field(name="importType")
    """Ingestion type. Required. Known values are: \"StaticCatalog\" and \"ImportFile\"."""
    source_catalog_url: Optional[str] = rest_field(name="sourceCatalogUrl")
    """Source catalog URL. *Required for StaticCatalog ingestion type."""
    source_data_type: Optional[str] = rest_field(name="sourceDataType")
    """Source catalog data type. *Required for ImportFile ingestion type."""
    skip_existing_items: bool = rest_field(name="skipExistingItems")
    """Skip processing existing items in the catalog. Required."""
    keep_original_assets: bool = rest_field(name="keepOriginalAssets")
    """Keep original source assets. Required."""

    @overload
    def __init__(
        self,
        *,
        import_type: Union[str, "_models.IngestionType"],
        skip_existing_items: bool,
        keep_original_assets: bool,
        source_catalog_url: Optional[str] = None,
        source_data_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionDefinition(IngestionDefinitionCreation):
    """Spatio geo-catalog ingestion definition.


    :ivar import_type: Ingestion type. Required. Known values are: "StaticCatalog" and
     "ImportFile".
    :vartype import_type: str or ~geocatalog.models.IngestionType
    :ivar source_catalog_url: Source catalog URL. *Required for StaticCatalog ingestion type.
    :vartype source_catalog_url: str
    :ivar source_data_type: Source catalog data type. *Required for ImportFile ingestion type.
    :vartype source_data_type: str
    :ivar skip_existing_items: Skip processing existing items in the catalog. Required.
    :vartype skip_existing_items: bool
    :ivar keep_original_assets: Keep original source assets. Required.
    :vartype keep_original_assets: bool
    :ivar id: Ingestion id. Required.
    :vartype id: str
    :ivar creation_time: Ingestion creation time. Required.
    :vartype creation_time: ~datetime.datetime
    """

    id: str = rest_field()
    """Ingestion id. Required."""
    creation_time: datetime.datetime = rest_field(name="creationTime", format="rfc3339")
    """Ingestion creation time. Required."""

    @overload
    def __init__(
        self,
        *,
        import_type: Union[str, "_models.IngestionType"],
        skip_existing_items: bool,
        keep_original_assets: bool,
        id: str,  # pylint: disable=redefined-builtin
        creation_time: datetime.datetime,
        source_catalog_url: Optional[str] = None,
        source_data_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionRun(_model_base.Model):
    """Spatio geo-catalog ingestion run.


    :ivar id: Run id. Required.
    :vartype id: str
    :ivar parent_run_id: Run id which this run is associated to becase has been retried or rerun.
    :vartype parent_run_id: str
    :ivar operation: Operation. Required.
    :vartype operation: ~geocatalog.models.Operation
    """

    id: str = rest_field()
    """Run id. Required."""
    parent_run_id: Optional[str] = rest_field(name="parentRunId")
    """Run id which this run is associated to becase has been retried or rerun."""
    operation: "_models.Operation" = rest_field()
    """Operation. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        operation: "_models.Operation",
        parent_run_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionRunSummary(_model_base.Model):
    """Spatio geo-catalog ingestion run summary.


    :ivar id: Run id. Required.
    :vartype id: str
    :ivar operation: Operation summary. Required.
    :vartype operation: ~geocatalog.models.OperationSummary
    """

    id: str = rest_field()
    """Run id. Required."""
    operation: "_models.OperationSummary" = rest_field()
    """Operation summary. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        operation: "_models.OperationSummary",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InmaLink(_model_base.Model):
    """InmaLink.

    All required parameters must be populated in order to send to server.

    :ivar rel: Required.
    :vartype rel: str
    :ivar href: Required.
    :vartype href: str
    :ivar type: Required.
    :vartype type: str
    :ivar title: Required.
    :vartype title: str
    """

    rel: str = rest_field()
    """Required."""
    href: str = rest_field()
    """Required."""
    type: str = rest_field()
    """Required."""
    title: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        rel: str,
        href: str,
        type: str,
        title: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Item(_model_base.Model):
    """Item.

    :ivar type: Type. "Feature"
    :vartype type: str or ~geocatalog.models.ItemType
    :ivar stac_version: Stac Version.
    :vartype stac_version: str
    :ivar stac_extensions: Stac Extensions.
    :vartype stac_extensions: list[str]
    :ivar id: Id.
    :vartype id: str
    :ivar geometry: Geometry.
    :vartype geometry: dict[str, any]
    :ivar bbox: Bbox.
    :vartype bbox: list[any]
    :ivar properties: Properties.
    :vartype properties: dict[str, any]
    :ivar links: Links.
    :vartype links: list[dict[str, any]]
    :ivar assets: Assets.
    :vartype assets: dict[str, any]
    :ivar collection: Collection.
    :vartype collection: str
    """

    type: Optional[Union[str, "_models.ItemType"]] = rest_field()
    """Type. \"Feature\""""
    stac_version: Optional[str] = rest_field()
    """Stac Version."""
    stac_extensions: Optional[List[str]] = rest_field()
    """Stac Extensions."""
    id: Optional[str] = rest_field()
    """Id."""
    geometry: Optional[Dict[str, Any]] = rest_field()
    """Geometry."""
    bbox: Optional[List[Any]] = rest_field()
    """Bbox."""
    properties: Optional[Dict[str, Any]] = rest_field()
    """Properties."""
    links: Optional[List[Dict[str, Any]]] = rest_field()
    """Links."""
    assets: Optional[Dict[str, Any]] = rest_field()
    """Assets."""
    collection: Optional[str] = rest_field()
    """Collection."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ItemType"]] = None,
        stac_version: Optional[str] = None,
        stac_extensions: Optional[List[str]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        geometry: Optional[Dict[str, Any]] = None,
        bbox: Optional[List[Any]] = None,
        properties: Optional[Dict[str, Any]] = None,
        links: Optional[List[Dict[str, Any]]] = None,
        assets: Optional[Dict[str, Any]] = None,
        collection: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Item0(_model_base.Model):
    """Item."""


class LegendConfig(_model_base.Model):
    """Defines overrides for dynamic legend generation.

    Attributes
    ----------

    type:
    Legend type to make, one of: ``continuous``\\ , ``classmap``\\ , ``interval`` or
    ``none`` (note, ``none`` is a string literal).
    labels:
    List of string labels, ideally fewer than 3 items. Will be flex
    spaced-between under the legend image.
    trim_start:
    The number of items to trim from the start of the legend definition.
    Used if there are values important for rendering (e.g. nodata) that
    aren't desirable in the legend.
    trim_end:
    Same as trim_start, but for the end of the legend definition.
    scale_factor:
    A factor to multiply interval legend labels by. Useful for scaled
    rasters whose colormap definitions map to unscaled values, effectively
    showing legend labels as scaled values.

    :ivar type: Type.
    :vartype type: str
    :ivar labels: Labels.
    :vartype labels: list[str]
    :ivar trim_start: Trimstart.
    :vartype trim_start: int
    :ivar trim_end: Trimend.
    :vartype trim_end: int
    :ivar scale_factor: Scalefactor.
    :vartype scale_factor: float
    """

    type: Optional[str] = rest_field()
    """Type."""
    labels: Optional[List[str]] = rest_field()
    """Labels."""
    trim_start: Optional[int] = rest_field(name="trimStart")
    """Trimstart."""
    trim_end: Optional[int] = rest_field(name="trimEnd")
    """Trimend."""
    scale_factor: Optional[float] = rest_field(name="scaleFactor")
    """Scalefactor."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        labels: Optional[List[str]] = None,
        trim_start: Optional[int] = None,
        trim_end: Optional[int] = None,
        scale_factor: Optional[float] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Link(_model_base.Model):
    """Link model.

    Ref:
    http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml.


    :ivar rel: Rel.
    :vartype rel: str
    :ivar title: Title.
    :vartype title: str
    :ivar type: MediaType. Known values are: "image/tiff; application=geotiff", "image/jp2",
     "image/png", "image/jpeg", "image/jpg", "image/webp", "application/x-binary",
     "application/xml", "application/json", "application/geo+json", "text/html", "text/plain", and
     "application/x-protobuf".
    :vartype type: str or ~geocatalog.models.LinkType
    :ivar href: Href. Required.
    :vartype href: str
    :ivar hreflang: Hreflang.
    :vartype hreflang: str
    :ivar length: Length.
    :vartype length: int
    """

    rel: Optional[str] = rest_field()
    """Rel."""
    title: Optional[str] = rest_field()
    """Title."""
    type: Optional[Union[str, "_models.LinkType"]] = rest_field()
    """MediaType. Known values are: \"image/tiff; application=geotiff\", \"image/jp2\", \"image/png\",
     \"image/jpeg\", \"image/jpg\", \"image/webp\", \"application/x-binary\", \"application/xml\",
     \"application/json\", \"application/geo+json\", \"text/html\", \"text/plain\", and
     \"application/x-protobuf\"."""
    href: str = rest_field()
    """Href. Required."""
    hreflang: Optional[str] = rest_field()
    """Hreflang."""
    length: Optional[int] = rest_field()
    """Length."""

    @overload
    def __init__(
        self,
        *,
        href: str,
        rel: Optional[str] = None,
        title: Optional[str] = None,
        type: Optional[Union[str, "_models.LinkType"]] = None,
        hreflang: Optional[str] = None,
        length: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Metadata(_model_base.Model):
    """Metadata Model.

    :ivar type: SearchType. Known values are: "mosaic" and "search".
    :vartype type: str or ~geocatalog.models.MetadataType
    :ivar bounds: Bounds.
    :vartype bounds: any
    :ivar minzoom: Minzoom.
    :vartype minzoom: int
    :ivar maxzoom: Maxzoom.
    :vartype maxzoom: int
    :ivar name: Name.
    :vartype name: str
    :ivar assets: Assets.
    :vartype assets: list[str]
    :ivar defaults: Defaults.
    :vartype defaults: dict[str, any]
    """

    type: Optional[Union[str, "_models.MetadataType"]] = rest_field()
    """SearchType. Known values are: \"mosaic\" and \"search\"."""
    bounds: Optional[Any] = rest_field()
    """Bounds."""
    minzoom: Optional[int] = rest_field()
    """Minzoom."""
    maxzoom: Optional[int] = rest_field()
    """Maxzoom."""
    name: Optional[str] = rest_field()
    """Name."""
    assets: Optional[List[str]] = rest_field()
    """Assets."""
    defaults: Optional[Dict[str, Any]] = rest_field()
    """Defaults."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.MetadataType"]] = None,
        bounds: Optional[Any] = None,
        minzoom: Optional[int] = None,
        maxzoom: Optional[int] = None,
        name: Optional[str] = None,
        assets: Optional[List[str]] = None,
        defaults: Optional[Dict[str, Any]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MosaicInfo(_model_base.Model):
    """MosaicInfo.


    :ivar mosaics: Mosaics. Required.
    :vartype mosaics: list[~geocatalog.models.Mosaics]
    :ivar render_options: Renderoptions. Required.
    :vartype render_options: list[~geocatalog.models.RenderOptions]
    :ivar default_location: Defines a default location for showcasing a collection.

     Attributes
     ----------

     zoom:
     Zoom level at which to center the map.
     coordinates:
     Coordinates at which to center the map, [latitude, longitude]. Required.
    :vartype default_location: ~geocatalog.models.DefaultLocation
    :ivar default_custom_query: Defaultcustomquery.
    :vartype default_custom_query: dict[str, any]
    :ivar animation_hint: Defines hints for animation frame settings, to be used as default
     overrides,
     for a
     particular collection. If not set, a global default will be used on the
     frontend.

     Attributes
     ----------

     unit:
     One of mins, hours, days, weeks, months, years
     step:
     The number of units to increment per frame
     duration:
     The number of seconds to display each frame
     frame_count:
     The total number of frames to generate.
    :vartype animation_hint: ~geocatalog.models.AnimationHint
    """

    mosaics: List["_models.Mosaics"] = rest_field()
    """Mosaics. Required."""
    render_options: List["_models.RenderOptions"] = rest_field(name="renderOptions")
    """Renderoptions. Required."""
    default_location: "_models.DefaultLocation" = rest_field(name="defaultLocation")
    """Defines a default location for showcasing a collection.
     
     Attributes
     ----------
     
     zoom:
     Zoom level at which to center the map.
     coordinates:
     Coordinates at which to center the map, [latitude, longitude]. Required."""
    default_custom_query: Optional[Dict[str, Any]] = rest_field(name="defaultCustomQuery")
    """Defaultcustomquery."""
    animation_hint: Optional["_models.AnimationHint"] = rest_field(name="animationHint")
    """Defines hints for animation frame settings, to be used as default overrides,
     for a
     particular collection. If not set, a global default will be used on the
     frontend.
     
     Attributes
     ----------
     
     unit:
     One of mins, hours, days, weeks, months, years
     step:
     The number of units to increment per frame
     duration:
     The number of seconds to display each frame
     frame_count:
     The total number of frames to generate."""

    @overload
    def __init__(
        self,
        *,
        mosaics: List["_models.Mosaics"],
        render_options: List["_models.RenderOptions"],
        default_location: "_models.DefaultLocation",
        default_custom_query: Optional[Dict[str, Any]] = None,
        animation_hint: Optional["_models.AnimationHint"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Mosaics(_model_base.Model):
    """A single predefined CQL2-JSON query representing a named mosaic.

    Attributes
    ----------

    name:
    A short name for this mosaic that describes its content, ideally less
    than 30 chars (e.g. "Sept - March, 2021 (low cloud)").
    description:
    A longer description of the mosaic that can be used to explain its content,
    if name is not sufficient.
    cql:
    A valid CQL2-JSON query.


    :ivar name: Name. Required.
    :vartype name: str
    :ivar description: Description.
    :vartype description: str
    :ivar cql: Cql. Required.
    :vartype cql: list[dict[str, any]]
    """

    name: str = rest_field()
    """Name. Required."""
    description: Optional[str] = rest_field()
    """Description."""
    cql: List[Dict[str, Any]] = rest_field()
    """Cql. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        cql: List[Dict[str, Any]],
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationSummary(_model_base.Model):
    """Spatio geo-catalog operation summary.


    :ivar id: Operation id. Required.
    :vartype id: str
    :ivar status: Run status. Required. Known values are: "Pending", "Running", "Finished", and
     "Canceled".
    :vartype status: str or ~geocatalog.models.OperationStatus
    """

    id: str = rest_field()
    """Operation id. Required."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """Run status. Required. Known values are: \"Pending\", \"Running\", \"Finished\", and
     \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationStatus"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(OperationSummary):
    """Spatio geo-catalog operation.


    :ivar id: Operation id. Required.
    :vartype id: str
    :ivar status: Run status. Required. Known values are: "Pending", "Running", "Finished", and
     "Canceled".
    :vartype status: str or ~geocatalog.models.OperationStatus
    :ivar creation_time: The UTC time at which the operation was created. Required.
    :vartype creation_time: ~datetime.datetime
    :ivar status_history: The history of the operation status in time. Required.
    :vartype status_history: list[~geocatalog.models.OperationStatusHistoryItem]
    :ivar start_time: The UTC time at which the operation was started.
    :vartype start_time: ~datetime.datetime
    :ivar finish_time: The UTC time at which the operation finished its execution.
    :vartype finish_time: ~datetime.datetime
    :ivar total_items: The number of total items to be processed. Required.
    :vartype total_items: int
    :ivar total_pending_items: The number of items pending to be processed. Required.
    :vartype total_pending_items: int
    :ivar total_successfull_items: The number of items successfully processed. Required.
    :vartype total_successfull_items: int
    :ivar total_failed_items: The number of items that have failed to be processed. Required.
    :vartype total_failed_items: int
    """

    creation_time: datetime.datetime = rest_field(name="creationTime", format="rfc3339")
    """The UTC time at which the operation was created. Required."""
    status_history: List["_models.OperationStatusHistoryItem"] = rest_field(name="statusHistory")
    """The history of the operation status in time. Required."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", format="rfc3339")
    """The UTC time at which the operation was started."""
    finish_time: Optional[datetime.datetime] = rest_field(name="finishTime", format="rfc3339")
    """The UTC time at which the operation finished its execution."""
    total_items: int = rest_field(name="totalItems")
    """The number of total items to be processed. Required."""
    total_pending_items: int = rest_field(name="totalPendingItems")
    """The number of items pending to be processed. Required."""
    total_successfull_items: int = rest_field(name="totalSuccessfullItems")
    """The number of items successfully processed. Required."""
    total_failed_items: int = rest_field(name="totalFailedItems")
    """The number of items that have failed to be processed. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationStatus"],
        creation_time: datetime.datetime,
        status_history: List["_models.OperationStatusHistoryItem"],
        total_items: int,
        total_pending_items: int,
        total_successfull_items: int,
        total_failed_items: int,
        start_time: Optional[datetime.datetime] = None,
        finish_time: Optional[datetime.datetime] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationStatusHistoryItem(_model_base.Model):
    """OperationStatusHistoryItem.


    :ivar time: The UTC time at which the status was set. Required.
    :vartype time: ~datetime.datetime
    :ivar status: The status of the operation. Required. Known values are: "Pending", "Running",
     "Finished", and "Canceled".
    :vartype status: str or ~geocatalog.models.OperationStatus
    :ivar error_message: If the status is failed, the error message.
    :vartype error_message: str
    """

    time: datetime.datetime = rest_field(format="rfc3339")
    """The UTC time at which the status was set. Required."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """The status of the operation. Required. Known values are: \"Pending\", \"Running\",
     \"Finished\", and \"Canceled\"."""
    error_message: Optional[str] = rest_field(name="errorMessage")
    """If the status is failed, the error message."""

    @overload
    def __init__(
        self,
        *,
        time: datetime.datetime,
        status: Union[str, "_models.OperationStatus"],
        error_message: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Polygon(_model_base.Model):
    """Polygon Model.


    :ivar coordinates: Coordinates. Required.
    :vartype coordinates: list[list[any]]
    :ivar type: Type.
    :vartype type: str
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    coordinates: List[List[Any]] = rest_field()
    """Coordinates. Required."""
    type: Optional[str] = rest_field()
    """Type."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[List[Any]],
        type: Optional[str] = None,
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PostFieldsExtension(_model_base.Model):
    """FieldsExtension.

    Attributes:
    include: set of fields to include.
    exclude: set of fields to exclude.

    :ivar include: Include.
    :vartype include: list[str]
    :ivar exclude: Exclude.
    :vartype exclude: list[str]
    """

    include: Optional[List[str]] = rest_field()
    """Include."""
    exclude: Optional[List[str]] = rest_field()
    """Exclude."""

    @overload
    def __init__(
        self,
        *,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Properties(_model_base.Model):
    """Properties.

    All required parameters must be populated in order to send to server.

    :ivar datetime: Required.
    :vartype datetime: str
    """

    datetime: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        datetime: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RegisterMosaic(_model_base.Model):
    """Model of /register endpoint input.

    :ivar collections: Collections.
    :vartype collections: list[str]
    :ivar ids: Ids.
    :vartype ids: list[str]
    :ivar bbox: Bbox.
    :vartype bbox: any
    :ivar intersects: Intersects.
    :vartype intersects: ~geocatalog.models.RegisterMosaicIntersects
    :ivar query: Query.
    :vartype query: dict[str, dict[str, any]]
    :ivar filter: Filter.
    :vartype filter: dict[str, any]
    :ivar datetime: Datetime.
    :vartype datetime: str
    :ivar sortby: Sortby.
    :vartype sortby: any
    :ivar filter_lang: filter language.

     ref:
    https://github.com/radiantearth/stac-api-spec/tree/master/fragments/filter#get-query-parameters-and-post-json-fields.
     Known values are: "cql-json", "cql2-json", and "cql2-text".
    :vartype filter_lang: str or ~geocatalog.models.FilterLang
    :ivar metadata: Metadata Model.
    :vartype metadata: ~geocatalog.models.Metadata
    """

    collections: Optional[List[str]] = rest_field()
    """Collections."""
    ids: Optional[List[str]] = rest_field()
    """Ids."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""
    intersects: Optional["_models.RegisterMosaicIntersects"] = rest_field()
    """Intersects."""
    query: Optional[Dict[str, Dict[str, Any]]] = rest_field()
    """Query."""
    filter: Optional[Dict[str, Any]] = rest_field()
    """Filter."""
    datetime: Optional[str] = rest_field()
    """Datetime."""
    sortby: Optional[Any] = rest_field()
    """Sortby."""
    filter_lang: Optional[Union[str, "_models.FilterLang"]] = rest_field(name="filter-lang")
    """filter language.
     
     ref:
     https://github.com/radiantearth/stac-api-spec/tree/master/fragments/filter#get-query-parameters-and-post-json-fields.  # pylint: disable=line-too-long
     Known values are: \"cql-json\", \"cql2-json\", and \"cql2-text\"."""
    metadata: Optional["_models.Metadata"] = rest_field()
    """Metadata Model."""

    @overload
    def __init__(
        self,
        *,
        collections: Optional[List[str]] = None,
        ids: Optional[List[str]] = None,
        bbox: Optional[Any] = None,
        intersects: Optional["_models.RegisterMosaicIntersects"] = None,
        query: Optional[Dict[str, Dict[str, Any]]] = None,
        filter: Optional[Dict[str, Any]] = None,  # pylint: disable=redefined-builtin
        datetime: Optional[str] = None,
        sortby: Optional[Any] = None,
        filter_lang: Optional[Union[str, "_models.FilterLang"]] = None,
        metadata: Optional["_models.Metadata"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RegisterMosaicIntersects(_model_base.Model):
    """Intersects."""


class RegisterResponse(_model_base.Model):
    """Response model for /register endpoint.


    :ivar searchid: Searchid. Required.
    :vartype searchid: str
    :ivar links: Links.
    :vartype links: list[~geocatalog.models.Link]
    """

    searchid: str = rest_field()
    """Searchid. Required."""
    links: Optional[List["_models.Link"]] = rest_field()
    """Links."""

    @overload
    def __init__(
        self,
        *,
        searchid: str,
        links: Optional[List["_models.Link"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RenderOptionCondition(_model_base.Model):
    """Defines a property/value condition for a render config to be enabled

    Attributes
    ----------

    property:
    The property to check.
    value:
    The value to check against.


    :ivar property: Property. Required.
    :vartype property: str
    :ivar value: Value.
    :vartype value: any
    """

    property: str = rest_field()
    """Property. Required."""
    value: Optional[Any] = rest_field()
    """Value."""

    @overload
    def __init__(
        self,
        *,
        property: str,  # pylint: disable=redefined-builtin
        value: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RenderOptions(_model_base.Model):
    """Defines a set of map-tile render options for a collection.

    Attributes
    ----------

    name:
    A short name for this render option that describes its content, ideally
    less than 30 chars (e.g. ``True Color``\\ ).
    description:
    A longer description of the render option that can be used to explain
    its content.
    type:
    The type of render option, defaults to raster-tile.
    options:
    A URL query-string encoded string of TiTiler rendering options. Valid
    only for ``raster-tile`` types.  See "Query Parameters":
    https://developmentseed.org/titiler/endpoints/cog/#description
    vector_options:
    Options for rendering vector tiles. Valid only for ``vt-polygon`` and
    ``vt-line`` types.
    min_zoom:
    Zoom level at which to start rendering the layer.
    legend:
    An optional legend configuration.
    conditions:
    A list of property/value conditions that must be in the active mosaic
    CQL for this render option to be enabled.


    :ivar name: Name. Required.
    :vartype name: str
    :ivar description: Description.
    :vartype description: str
    :ivar type: RenderOptionType. Known values are: "raster-tile", "vt-polygon", and "vt-line".
    :vartype type: str or ~geocatalog.models.RenderOptionsType
    :ivar options: Options.
    :vartype options: str
    :ivar vector_options: Defines a set of vector tile render options for a collection.

     Attributes
     ----------

     tilejson_key:
     The key in the collection-level assets which contains the tilejson URL.
     source_layer:
     The source layer name to render from the associated vector tiles.
     fill_color:
     The fill color for polygons.
     stroke_color:
     The stroke color for lines.
     stroke_width:
     The stroke width for lines.
     filter:
     MapBox Filter Expression to filter vector features by.
    :vartype vector_options: ~geocatalog.models.VectorTileOptions
    :ivar min_zoom: Minzoom. Required.
    :vartype min_zoom: int
    :ivar legend: Defines overrides for dynamic legend generation.

     Attributes
     ----------

     type:
     Legend type to make, one of: ``continuous``\\ , ``classmap``\\ , ``interval`` or
     ``none`` (note, ``none`` is a string literal).
     labels:
     List of string labels, ideally fewer than 3 items. Will be flex
     spaced-between under the legend image.
     trim_start:
     The number of items to trim from the start of the legend definition.
     Used if there are values important for rendering (e.g. nodata) that
     aren't desirable in the legend.
     trim_end:
     Same as trim_start, but for the end of the legend definition.
     scale_factor:
     A factor to multiply interval legend labels by. Useful for scaled
     rasters whose colormap definitions map to unscaled values, effectively
     showing legend labels as scaled values.
    :vartype legend: ~geocatalog.models.LegendConfig
    :ivar conditions: Conditions.
    :vartype conditions: list[~geocatalog.models.RenderOptionCondition]
    """

    name: str = rest_field()
    """Name. Required."""
    description: Optional[str] = rest_field()
    """Description."""
    type: Optional[Union[str, "_models.RenderOptionsType"]] = rest_field()
    """RenderOptionType. Known values are: \"raster-tile\", \"vt-polygon\", and \"vt-line\"."""
    options: Optional[str] = rest_field()
    """Options."""
    vector_options: Optional["_models.VectorTileOptions"] = rest_field(name="vectorOptions")
    """Defines a set of vector tile render options for a collection.
     
     Attributes
     ----------
     
     tilejson_key:
     The key in the collection-level assets which contains the tilejson URL.
     source_layer:
     The source layer name to render from the associated vector tiles.
     fill_color:
     The fill color for polygons.
     stroke_color:
     The stroke color for lines.
     stroke_width:
     The stroke width for lines.
     filter:
     MapBox Filter Expression to filter vector features by."""
    min_zoom: int = rest_field(name="minZoom")
    """Minzoom. Required."""
    legend: Optional["_models.LegendConfig"] = rest_field()
    """Defines overrides for dynamic legend generation.
     
     Attributes
     ----------
     
     type:
     Legend type to make, one of: ``continuous``\ , ``classmap``\ , ``interval`` or
     ``none`` (note, ``none`` is a string literal).
     labels:
     List of string labels, ideally fewer than 3 items. Will be flex
     spaced-between under the legend image.
     trim_start:
     The number of items to trim from the start of the legend definition.
     Used if there are values important for rendering (e.g. nodata) that
     aren't desirable in the legend.
     trim_end:
     Same as trim_start, but for the end of the legend definition.
     scale_factor:
     A factor to multiply interval legend labels by. Useful for scaled
     rasters whose colormap definitions map to unscaled values, effectively
     showing legend labels as scaled values."""
    conditions: Optional[List["_models.RenderOptionCondition"]] = rest_field()
    """Conditions."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        min_zoom: int,
        description: Optional[str] = None,
        type: Optional[Union[str, "_models.RenderOptionsType"]] = None,
        options: Optional[str] = None,
        vector_options: Optional["_models.VectorTileOptions"] = None,
        legend: Optional["_models.LegendConfig"] = None,
        conditions: Optional[List["_models.RenderOptionCondition"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RioTilerModelsInfo(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Dataset Info.


    :ivar bounds: Bounds. Required.
    :vartype bounds: list[any]
    :ivar minzoom: Minzoom. Required.
    :vartype minzoom: int
    :ivar maxzoom: Maxzoom. Required.
    :vartype maxzoom: int
    :ivar band_metadata: Band Metadata. Required.
    :vartype band_metadata: list[list[str]]
    :ivar band_descriptions: Band Descriptions. Required.
    :vartype band_descriptions: list[list[str]]
    :ivar dtype: Dtype. Required.
    :vartype dtype: str
    :ivar nodata_type: rio-tiler Nodata types. Required. Known values are: "Alpha", "Mask",
     "Internal", "Nodata", and "None".
    :vartype nodata_type: str or ~geocatalog.models.NodataTypes
    :ivar colorinterp: Colorinterp.
    :vartype colorinterp: list[str]
    :ivar scale: Scale.
    :vartype scale: float
    :ivar offset: Offset.
    :vartype offset: float
    :ivar colormap: Colormap.
    :vartype colormap: dict[str, list[int]]
    """

    bounds: List[Any] = rest_field()
    """Bounds. Required."""
    minzoom: int = rest_field()
    """Minzoom. Required."""
    maxzoom: int = rest_field()
    """Maxzoom. Required."""
    band_metadata: List[List[str]] = rest_field()
    """Band Metadata. Required."""
    band_descriptions: List[List[str]] = rest_field()
    """Band Descriptions. Required."""
    dtype: str = rest_field()
    """Dtype. Required."""
    nodata_type: Union[str, "_models.NodataTypes"] = rest_field()
    """rio-tiler Nodata types. Required. Known values are: \"Alpha\", \"Mask\", \"Internal\",
     \"Nodata\", and \"None\"."""
    colorinterp: Optional[List[str]] = rest_field()
    """Colorinterp."""
    scale: Optional[float] = rest_field()
    """Scale."""
    offset: Optional[float] = rest_field()
    """Offset."""
    colormap: Optional[Dict[str, List[int]]] = rest_field()
    """Colormap."""

    @overload
    def __init__(
        self,
        *,
        bounds: List[Any],
        minzoom: int,
        maxzoom: int,
        band_metadata: List[List[str]],
        band_descriptions: List[List[str]],
        dtype: str,
        nodata_type: Union[str, "_models.NodataTypes"],
        colorinterp: Optional[List[str]] = None,
        scale: Optional[float] = None,
        offset: Optional[float] = None,
        colormap: Optional[Dict[str, List[int]]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SASToken(_model_base.Model):
    """SAS Token response.


    :ivar msft_expiry: Msft:Expiry. Required.
    :vartype msft_expiry: ~datetime.datetime
    :ivar token: Token. Required.
    :vartype token: str
    """

    msft_expiry: datetime.datetime = rest_field(name="msft:expiry", format="rfc3339")
    """Msft:Expiry. Required."""
    token: str = rest_field()
    """Token. Required."""

    @overload
    def __init__(
        self,
        *,
        msft_expiry: datetime.datetime,
        token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Search(_model_base.Model):
    """PgSTAC Search entry.

    ref:
    https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915.


    :ivar hash: Hash. Required.
    :vartype hash: str
    :ivar search: Search. Required.
    :vartype search: dict[str, any]
    :ivar where: Where. Required.
    :vartype where: str
    :ivar orderby: Orderby. Required.
    :vartype orderby: str
    :ivar lastused: Lastused. Required.
    :vartype lastused: ~datetime.datetime
    :ivar usecount: Usecount. Required.
    :vartype usecount: int
    :ivar metadata: Metadata Model. Required.
    :vartype metadata: ~geocatalog.models.Metadata
    """

    hash: str = rest_field()
    """Hash. Required."""
    search: Dict[str, Any] = rest_field()
    """Search. Required."""
    where: str = rest_field(name="_where")
    """Where. Required."""
    orderby: str = rest_field()
    """Orderby. Required."""
    lastused: datetime.datetime = rest_field(format="rfc3339")
    """Lastused. Required."""
    usecount: int = rest_field()
    """Usecount. Required."""
    metadata: "_models.Metadata" = rest_field()
    """Metadata Model. Required."""

    @overload
    def __init__(
        self,
        *,
        hash: str,
        search: Dict[str, Any],
        where: str,
        orderby: str,
        lastused: datetime.datetime,
        usecount: int,
        metadata: "_models.Metadata",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SearchPostRequest(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Search model.

    Overrides the validation for datetime from the base request model.

    :ivar collections: Collections.
    :vartype collections: list[str]
    :ivar ids: Ids.
    :vartype ids: list[str]
    :ivar bbox: Bbox.
    :vartype bbox: any
    :ivar intersects: Intersects.
    :vartype intersects: ~geocatalog.models.SearchPostRequestIntersects
    :ivar datetime: Datetime.
    :vartype datetime: str
    :ivar limit: Limit.
    :vartype limit: int
    :ivar conf: Conf.
    :vartype conf: dict[str, any]
    :ivar query: Query.
    :vartype query: dict[str, dict[str, any]]
    :ivar sortby: Sortby.
    :vartype sortby: list[~geocatalog.models.SortExtension]
    :ivar fields: Fields.
    :vartype fields: list[~geocatalog.models.SearchPostRequestFields]
    :ivar filter: Filter.
    :vartype filter: dict[str, any]
    :ivar filter_crs: Filter-Crs.
    :vartype filter_crs: str
    :ivar filter_lang: Known values are: "cql-json", "cql2-json", and "cql2-text".
    :vartype filter_lang: str or ~geocatalog.models.SearchPostRequestFilterLang
    :ivar token: Token.
    :vartype token: str
    """

    collections: Optional[List[str]] = rest_field()
    """Collections."""
    ids: Optional[List[str]] = rest_field()
    """Ids."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""
    intersects: Optional["_models.SearchPostRequestIntersects"] = rest_field()
    """Intersects."""
    datetime: Optional[str] = rest_field()
    """Datetime."""
    limit: Optional[int] = rest_field()
    """Limit."""
    conf: Optional[Dict[str, Any]] = rest_field()
    """Conf."""
    query: Optional[Dict[str, Dict[str, Any]]] = rest_field()
    """Query."""
    sortby: Optional[List["_models.SortExtension"]] = rest_field()
    """Sortby."""
    fields: Optional[List["_models.SearchPostRequestFields"]] = rest_field()
    """Fields."""
    filter: Optional[Dict[str, Any]] = rest_field()
    """Filter."""
    filter_crs: Optional[str] = rest_field(name="filter-crs")
    """Filter-Crs."""
    filter_lang: Optional[Union[str, "_models.SearchPostRequestFilterLang"]] = rest_field(name="filter-lang")
    """Known values are: \"cql-json\", \"cql2-json\", and \"cql2-text\"."""
    token: Optional[str] = rest_field()
    """Token."""

    @overload
    def __init__(
        self,
        *,
        collections: Optional[List[str]] = None,
        ids: Optional[List[str]] = None,
        bbox: Optional[Any] = None,
        intersects: Optional["_models.SearchPostRequestIntersects"] = None,
        datetime: Optional[str] = None,
        limit: Optional[int] = None,
        conf: Optional[Dict[str, Any]] = None,
        query: Optional[Dict[str, Dict[str, Any]]] = None,
        sortby: Optional[List["_models.SortExtension"]] = None,
        fields: Optional[List["_models.SearchPostRequestFields"]] = None,
        filter: Optional[Dict[str, Any]] = None,  # pylint: disable=redefined-builtin
        filter_crs: Optional[str] = None,
        filter_lang: Optional[Union[str, "_models.SearchPostRequestFilterLang"]] = None,
        token: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SearchPostRequestFields(PostFieldsExtension):
    """Fields.

    :ivar include: Include.
    :vartype include: list[str]
    :ivar exclude: Exclude.
    :vartype exclude: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SearchPostRequestIntersects(_model_base.Model):
    """Intersects."""


class SortExtension(_model_base.Model):
    """https://github.com/radiantearth/stac-api-spec/tree/master/extensions/sort#sort-api-extension.

    All required parameters must be populated in order to send to server.

    :ivar field: Field. Required.
    :vartype field: str
    :ivar direction: An enumeration. Required. Known values are: "asc" and "desc".
    :vartype direction: str or ~geocatalog.models.SortDirections
    """

    field: str = rest_field()
    """Field. Required."""
    direction: Union[str, "_models.SortDirections"] = rest_field()
    """An enumeration. Required. Known values are: \"asc\" and \"desc\"."""

    @overload
    def __init__(
        self,
        *,
        field: str,
        direction: Union[str, "_models.SortDirections"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SourceDataType(_model_base.Model):
    """SourceDataType.


    :ivar name: Source data type name. Required.
    :vartype name: str
    :ivar title: Source data type title. Required.
    :vartype title: str
    """

    name: str = rest_field()
    """Source data type name. Required."""
    title: str = rest_field()
    """Source data type title. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACItem(_model_base.Model):
    """STACItem.

    All required parameters must be populated in order to send to server.

    :ivar type: Required.
    :vartype type: str
    :ivar stac_version: Required.
    :vartype stac_version: str
    :ivar stac_extensions: Required.
    :vartype stac_extensions: list[str]
    :ivar id: Required.
    :vartype id: str
    :ivar geometry: Required.
    :vartype geometry: any
    :ivar bbox: Required.
    :vartype bbox: list[int]
    :ivar properties: Required.
    :vartype properties: ~geocatalog.models.Properties
    :ivar assets: Required.
    :vartype assets: any
    :ivar links: Required.
    :vartype links: list[~geocatalog.models.InmaLink]
    :ivar collection: Required.
    :vartype collection: str
    """

    type: str = rest_field()
    """Required."""
    stac_version: str = rest_field()
    """Required."""
    stac_extensions: List[str] = rest_field()
    """Required."""
    id: str = rest_field()
    """Required."""
    geometry: Any = rest_field()
    """Required."""
    bbox: List[int] = rest_field()
    """Required."""
    properties: "_models.Properties" = rest_field()
    """Required."""
    assets: Any = rest_field()
    """Required."""
    links: List["_models.InmaLink"] = rest_field()
    """Required."""
    collection: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        stac_version: str,
        stac_extensions: List[str],
        id: str,  # pylint: disable=redefined-builtin
        geometry: Any,
        bbox: List[int],
        properties: "_models.Properties",
        assets: Any,
        links: List["_models.InmaLink"],
        collection: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACItemCollection(_model_base.Model):
    """STACItemCollection.


    :ivar type: Required.
    :vartype type: str
    :ivar features: Required.
    :vartype features: list[~geocatalog.models.STACItem]
    :ivar links: Required.
    :vartype links: list[~geocatalog.models.InmaLink]
    :ivar stac_version:
    :vartype stac_version: str
    :ivar number_matched:
    :vartype number_matched: int
    :ivar number_returned:
    :vartype number_returned: int
    """

    type: str = rest_field()
    """Required."""
    features: List["_models.STACItem"] = rest_field()
    """Required."""
    links: List["_models.InmaLink"] = rest_field()
    """Required."""
    stac_version: Optional[str] = rest_field()
    number_matched: Optional[int] = rest_field(name="numberMatched")
    number_returned: Optional[int] = rest_field(name="numberReturned")

    @overload
    def __init__(
        self,
        *,
        type: str,
        features: List["_models.STACItem"],
        links: List["_models.InmaLink"],
        stac_version: Optional[str] = None,
        number_matched: Optional[int] = None,
        number_returned: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACPostOrPutItem(_model_base.Model):
    """STACPostOrPutItem.

    All required parameters must be populated in order to send to server.

    :ivar type: Required.
    :vartype type: str
    :ivar stac_version: Required.
    :vartype stac_version: str
    :ivar stac_extensions: Required.
    :vartype stac_extensions: list[str]
    :ivar id: Required.
    :vartype id: str
    :ivar geometry: Required.
    :vartype geometry: any
    :ivar bbox: Required.
    :vartype bbox: list[int]
    :ivar properties: Required.
    :vartype properties: ~geocatalog.models.Properties
    :ivar assets: Required.
    :vartype assets: any
    :ivar links: Required.
    :vartype links: list[~geocatalog.models.InmaLink]
    :ivar collection: Required.
    :vartype collection: str
    """

    type: str = rest_field()
    """Required."""
    stac_version: str = rest_field()
    """Required."""
    stac_extensions: List[str] = rest_field()
    """Required."""
    id: str = rest_field()
    """Required."""
    geometry: Any = rest_field()
    """Required."""
    bbox: List[int] = rest_field()
    """Required."""
    properties: "_models.Properties" = rest_field()
    """Required."""
    assets: Any = rest_field()
    """Required."""
    links: List["_models.InmaLink"] = rest_field()
    """Required."""
    collection: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        stac_version: str,
        stac_extensions: List[str],
        id: str,  # pylint: disable=redefined-builtin
        geometry: Any,
        bbox: List[int],
        properties: "_models.Properties",
        assets: Any,
        links: List["_models.InmaLink"],
        collection: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACPostOrPutItemCollection(_model_base.Model):
    """STACPostOrPutItemCollection.

    All required parameters must be populated in order to send to server.

    :ivar type: Required.
    :vartype type: str
    :ivar features: Required.
    :vartype features: list[~geocatalog.models.STACItem]
    :ivar links:
    :vartype links: list[~geocatalog.models.InmaLink]
    :ivar stac_version:
    :vartype stac_version: str
    :ivar number_matched:
    :vartype number_matched: int
    :ivar number_returned:
    :vartype number_returned: int
    """

    type: str = rest_field()
    """Required."""
    features: List["_models.STACItem"] = rest_field()
    """Required."""
    links: Optional[List["_models.InmaLink"]] = rest_field()
    stac_version: Optional[str] = rest_field()
    number_matched: Optional[int] = rest_field(name="numberMatched")
    number_returned: Optional[int] = rest_field(name="numberReturned")

    @overload
    def __init__(
        self,
        *,
        type: str,
        features: List["_models.STACItem"],
        links: Optional[List["_models.InmaLink"]] = None,
        stac_version: Optional[str] = None,
        number_matched: Optional[int] = None,
        number_returned: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TileJson(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """TileJSON model.

    Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0.


    :ivar tilejson: Tilejson.
    :vartype tilejson: str
    :ivar name: Name.
    :vartype name: str
    :ivar description: Description.
    :vartype description: str
    :ivar version: Version.
    :vartype version: str
    :ivar attribution: Attribution.
    :vartype attribution: str
    :ivar template: Template.
    :vartype template: str
    :ivar legend: Legend.
    :vartype legend: str
    :ivar scheme: SchemeEnum. Known values are: "xyz" and "tms".
    :vartype scheme: str or ~geocatalog.models.TileJsonScheme
    :ivar tiles: Tiles. Required.
    :vartype tiles: list[str]
    :ivar grids: Grids.
    :vartype grids: list[str]
    :ivar data: Data.
    :vartype data: list[str]
    :ivar minzoom: Minzoom.
    :vartype minzoom: int
    :ivar maxzoom: Maxzoom.
    :vartype maxzoom: int
    :ivar bounds: Bounds.
    :vartype bounds: list[float]
    :ivar center: Center.
    :vartype center: list[float]
    """

    tilejson: Optional[str] = rest_field()
    """Tilejson."""
    name: Optional[str] = rest_field()
    """Name."""
    description: Optional[str] = rest_field()
    """Description."""
    version: Optional[str] = rest_field()
    """Version."""
    attribution: Optional[str] = rest_field()
    """Attribution."""
    template: Optional[str] = rest_field()
    """Template."""
    legend: Optional[str] = rest_field()
    """Legend."""
    scheme: Optional[Union[str, "_models.TileJsonScheme"]] = rest_field()
    """SchemeEnum. Known values are: \"xyz\" and \"tms\"."""
    tiles: List[str] = rest_field()
    """Tiles. Required."""
    grids: Optional[List[str]] = rest_field()
    """Grids."""
    data: Optional[List[str]] = rest_field()
    """Data."""
    minzoom: Optional[int] = rest_field()
    """Minzoom."""
    maxzoom: Optional[int] = rest_field()
    """Maxzoom."""
    bounds: Optional[List[float]] = rest_field()
    """Bounds."""
    center: Optional[List[float]] = rest_field()
    """Center."""

    @overload
    def __init__(
        self,
        *,
        tiles: List[str],
        tilejson: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        version: Optional[str] = None,
        attribution: Optional[str] = None,
        template: Optional[str] = None,
        legend: Optional[str] = None,
        scheme: Optional[Union[str, "_models.TileJsonScheme"]] = None,
        grids: Optional[List[str]] = None,
        data: Optional[List[str]] = None,
        minzoom: Optional[int] = None,
        maxzoom: Optional[int] = None,
        bounds: Optional[List[float]] = None,
        center: Optional[List[float]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TitilerCoreModelsResponsesPoint(_model_base.Model):
    """Point model.

    response model for ``/point`` endpoints.


    :ivar coordinates: Coordinates. Required.
    :vartype coordinates: list[float]
    :ivar values_property: Values. Required.
    :vartype values_property: list[float]
    :ivar band_names: Band Names. Required.
    :vartype band_names: list[str]
    """

    coordinates: List[float] = rest_field()
    """Coordinates. Required."""
    values_property: List[float] = rest_field(name="values")
    """Values. Required."""
    band_names: List[str] = rest_field()
    """Band Names. Required."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[float],
        values_property: List[float],
        band_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TitilerPgstacModelInfo(_model_base.Model):
    """Response model for /info endpoint.


    :ivar search: PgSTAC Search entry.

     ref:
    https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915.
     Required.
    :vartype search: ~geocatalog.models.Search
    :ivar links: Links.
    :vartype links: list[~geocatalog.models.Link]
    """

    search: "_models.Search" = rest_field()
    """PgSTAC Search entry.
     
     ref:
     https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915.
     Required."""
    links: Optional[List["_models.Link"]] = rest_field()
    """Links."""

    @overload
    def __init__(
        self,
        *,
        search: "_models.Search",
        links: Optional[List["_models.Link"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VectorTileOptions(_model_base.Model):
    """Defines a set of vector tile render options for a collection.

    Attributes
    ----------

    tilejson_key:
    The key in the collection-level assets which contains the tilejson URL.
    source_layer:
    The source layer name to render from the associated vector tiles.
    fill_color:
    The fill color for polygons.
    stroke_color:
    The stroke color for lines.
    stroke_width:
    The stroke width for lines.
    filter:
    MapBox Filter Expression to filter vector features by.


    :ivar tilejson_key: Tilejsonkey. Required.
    :vartype tilejson_key: str
    :ivar source_layer: Sourcelayer. Required.
    :vartype source_layer: str
    :ivar fill_color: Fillcolor.
    :vartype fill_color: str
    :ivar stroke_color: Strokecolor.
    :vartype stroke_color: str
    :ivar stroke_width: Strokewidth.
    :vartype stroke_width: int
    :ivar filter: Filter.
    :vartype filter: list[any]
    """

    tilejson_key: str = rest_field(name="tilejsonKey")
    """Tilejsonkey. Required."""
    source_layer: str = rest_field(name="sourceLayer")
    """Sourcelayer. Required."""
    fill_color: Optional[str] = rest_field(name="fillColor")
    """Fillcolor."""
    stroke_color: Optional[str] = rest_field(name="strokeColor")
    """Strokecolor."""
    stroke_width: Optional[int] = rest_field(name="strokeWidth")
    """Strokewidth."""
    filter: Optional[List[Any]] = rest_field()
    """Filter."""

    @overload
    def __init__(
        self,
        *,
        tilejson_key: str,
        source_layer: str,
        fill_color: Optional[str] = None,
        stroke_color: Optional[str] = None,
        stroke_width: Optional[int] = None,
        filter: Optional[List[Any]] = None,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
